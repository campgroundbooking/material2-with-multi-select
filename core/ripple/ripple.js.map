{"version":3,"file":"ripple.js","sourceRoot":"","sources":["../../../../../src/lib/core/ripple/ripple.ts"],"names":[],"mappings":";;;;;;;;;;;;OAAO,EACL,SAAS,EACT,UAAU,EACV,KAAK,EACL,MAAM,EACN,MAAM,EAIN,WAAW,EACX,QAAQ,EACT,MAAM,eAAe;OACf,EAAe,cAAc,EAAC,MAAM,mBAAmB;OACvD,EAAC,aAAa,EAAC,MAAM,oCAAoC;AAGhE,8FAA8F;AAC9F,OAAO,IAAM,kBAAkB,GAAG,IAAI,WAAW,CAAC,oBAAoB,CAAC,CAAC;AAUxE;IA6CE,kBAAY,UAAsB,EAAE,MAAc,EAAE,KAAoB,EACZ,oBAA6B;QAA7B,yBAAoB,GAApB,oBAAoB,CAAS;QAxBzF;;;;WAIG;QACsB,WAAM,GAAW,CAAC,CAAC;QAE5C;;;;WAIG;QAC2B,gBAAW,GAAW,CAAC,CAAC;QAcpD,IAAI,CAAC,eAAe,GAAG,IAAI,cAAc,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IACvE,CAAC;IAED,8BAAW,GAAX,UAAY,OAAsB;QAChC,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACvD,CAAC;QAED,IAAI,CAAC,eAAe,CAAC,cAAc,GAAG,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,QAAQ,CAAC;QACjF,IAAI,CAAC,eAAe,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;IACxD,CAAC;IAED,8BAAW,GAAX;QACE,4DAA4D;QAC5D,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED,0DAA0D;IAC1D,yBAAM,GAAN,UAAO,KAAa,EAAE,KAAa,EAAE,MAA0B;QAA1B,sBAA0B,GAA1B,SAAS,IAAI,CAAC,YAAY;QAC7D,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACjE,CAAC;IAED,uDAAuD;IACvD,6BAAU,GAAV;QACE,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,CAAC;IACpC,CAAC;IAGD,sBAAI,kCAAY;QADhB,8DAA8D;aAC9D;YACE,MAAM,CAAC;gBACL,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,KAAK,EAAE,IAAI,CAAC,KAAK;aAClB,CAAC;QACJ,CAAC;;;OAAA;IA3ED;QAAC,KAAK,CAAC,iBAAiB,CAAC;;6CAAA;IAMzB;QAAC,KAAK,CAAC,kBAAkB,CAAC;;8CAAA;IAM1B;QAAC,KAAK,CAAC,kBAAkB,CAAC;;8CAAA;IAO1B;QAAC,KAAK,CAAC,gBAAgB,CAAC;;4CAAA;IAOxB;QAAC,KAAK,CAAC,qBAAqB,CAAC;;iDAAA;IAG7B;QAAC,KAAK,CAAC,eAAe,CAAC;;2CAAA;IAGvB;QAAC,KAAK,CAAC,mBAAmB,CAAC;;+CAAA;IAhD7B;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,2BAA2B;YACrC,QAAQ,EAAE,UAAU;YACpB,IAAI,EAAE;gBACJ,oBAAoB,EAAE,MAAM;gBAC5B,8BAA8B,EAAE,WAAW;aAC5C;SACF,CAAC;mBA+Ca,QAAQ,EAAE;mBAAE,MAAM,CAAC,kBAAkB,CAAC;;gBA/CnD;IAqFF,eAAC;AAAD,CAAC,AApFD,IAoFC","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  OpaqueToken,\n  Optional,\n} from '@angular/core';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {RippleRef} from './ripple-ref';\n\n/** OpaqueToken that can be used to globally disable all ripples. Except programmatic ones. */\nexport const MD_DISABLE_RIPPLES = new OpaqueToken('md-disable-ripples');\n\n@Directive({\n  selector: '[md-ripple], [mat-ripple]',\n  exportAs: 'mdRipple',\n  host: {\n    '[class.mat-ripple]': 'true',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MdRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n  @Input('mdRippleTrigger') trigger: HTMLElement|HTMLElement;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('mdRippleCentered') centered: boolean;\n\n  /**\n   * Whether click events will not trigger the ripple. It can still be triggered by manually\n   * calling createRipple()\n   */\n  @Input('mdRippleDisabled') disabled: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('mdRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   */\n  @Input('mdRippleSpeedFactor') speedFactor: number = 1;\n\n  /** Custom color for ripples. */\n  @Input('mdRippleColor') color: string;\n\n  /** Whether foreground ripples should be visible outside the component's bounds. */\n  @Input('mdRippleUnbounded') unbounded: boolean;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  constructor(elementRef: ElementRef, ngZone: NgZone, ruler: ViewportRuler,\n              @Optional() @Inject(MD_DISABLE_RIPPLES) private _forceDisableRipples: boolean) {\n\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['trigger'] && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._rippleRenderer.rippleDisabled = this._forceDisableRipples || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\n\n  ngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor,\n      radius: this.radius,\n      color: this.color\n    };\n  }\n}\n"]}